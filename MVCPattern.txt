1. 아키텍쳐 개요
    1) 대부분의 중,대규모 웹 애플리케이션은 효율적인 개발 및 유지보수를
       위하여 개층화(Layering)하여 개발하는 것이 일반적임
    2) 프리젠테이션(pressentation Layer), 서비스 계층(Service Layer),
       데이터엑세스 계층(Data Access Layer) 3계층과 모든 계층에서
       사용되는 도메인 모델로 구성됨
    3) 각각의 계층은 독립적으로 분리하여 구현하는 것이 가능해야 하며,
       각 계층에서 담당해야 할 기능들이 있음.
    
2. Spring MVC
    1) 스프링 프레임워크를 구성하는 모듈, 정식 명칭은 Spring web MVC임.
    2) 서블릿 API를 기반으로 작성된 웹 프레임워크임
    3) 프런트 컨트롤러 패턴과 MVC 아키텍쳐 패턴을 사용함
    4) 유연하고 확장성이 뛰어난 구조를 제공함
    5) 자바 언어의 애노테이션(Annotation)과 리플렉션(Refection) API를
       적극 사용함.
    6) 애노테이션 기반 프로그래밍(Annotation-based programming) 모델을 제공함.
    7) 경량 함수형 프로그래밍 모델 (functional programming model)을 지원함

3. 관심사의 분리 (Separation of Concern)
    1) 클라이언트에서 요청이 들어옴
    2) DispatcherServlet에서 입력을 처리, new Model()을 생성하며
       Controller로 보냄
    3) Controller에서 매개변수로 Map의 형태인 Model을 받음
    4) 유효성 검사를 통과하면 처리 및 Model에 작업 결과를 저장.
    5) 작업 결과를 보여줄 View의 이름을 String으로 DispatcherServlet에게 반환.
    6) DispatcherServlet에서 반환된 View의 이름을 찾아서 Model을 전달
    7) 해당 View에서 클라이언트로 응답을 보냄
   
       - 컨트롤러의 메서드 리턴타입
            - String : 뷰이름을 반환
            - void : 메핑된 url의 끝단어가 뷰 이름
            - ModelAndView : Model과 View 이름을 반환
               - ModelAndView 객체를 Controller 내부에서 생성
               - ModelAndView에 뷰의 이름과 작업 결과를 저장해서 반환
    8) 효과
       - 응집도 높아짐
           - 하나의 모듈, 클래스가 하나의 책임 또는 관심사에만 집중
             되어 있다는 뜻임.
       - 결합도가 낮아짐
           - 하나의 오브젝트가 변경될 때에 관계를 맺고 다른 오브젝트에
             영향을 안준다는 뜻임.

4. DB 연동
   1) 데이터를 주고받기 위한 DTO 클래스와 테이블에 접근하기 위한 
      DAO 클래스
   2) DAO (Data Access Object) 패턴
      - 데이터 엑세스 계층은 DAO 패턴을 적용하여
        비지니스 로직과 데이터 엑세스 로직을 분리하는 것이 원칙임
      - DAO 패턴은 서비스 계층에 영향을 주지 않고
        데이터 엑세스 기술을 변경할수 있는 장점을 가짐.
      - JDBC를 통해 구현함
      - 하나의 테이블에서 수행할 수 있는 기능CRUD 작업을 전담함
   3) DTO (Data Transfer Object)
      - 계층 사이에서 데이터를 교환하기 위해 생성하는 객체
      - 별다른 로직 없이 속성(멤버 변수)과 그 속성에 접근하기 위한
      - 세터/게터 메서드만 갖춘게 특징임.

5. 계층화 (Layering)
   1) 관심이 같은 것은 한곳으로 모으고,
      다른 것은 따로 떨어뜨려 놓음
      => 새로 영향을 주지 않도록 분리하는 것임.
   
   2) 복잡한 소프트웨어를 계층으로 나눔으로서 관심사를 분리함.
      - 프레젠테이션(Presentation)
         - 사용자와 소프트웨어간 상호작용을 처리함
         
               ||
               ||
               || 도메인 (Domain) : 핵심 업무 처리하는 객체들로 구성
               ||                  엔터프라이즈 애플리케이션에서 가장 중요한 자산
              \||/
         - 데이터 원본 (DataSource)
            - 파일 또는 데이터베이스 시스템 등과 데이터 송/수신 처리함

6. 소프트웨어 개발시 지켜야 할 두가지 요건
   1) 오늘 완성해야 하는 기능을 구현하는 코드를 짜야하는 동시에
   2) 내일 쉽게 변경할 수 있는 코드를 짜야 함

7. MVC (Model-View-Controller) 아키텍쳐 패턴 (외우기)
   1) 모델-뷰-컨트롤러는 소프트웨어 공학에서 사용되는 아키텍쳐 패턴
   2) 주목적은 Business Logic과 Presentation logic 분리하기 위함.
   3) 서로 영향없이 쉽게 고칠 수 있는 애플리케이션 만들수 있음
   4) Model : 애플리케이션의 정보 데이터, Business Logi
      View : 사용자에게 제공할 화면 (Pressentation Logic)
      Controller : Model과 View 사이의 상호 작용을 관리

8. MVC 컴포넌트 역할
   1) Model 컴포넌트
      - 데이터 저장소(DB)의 연동하여 사용자가 입력한 데이터나
      - 사용자에게 출력할 데이터를 다루는 일을 함
      - 여러 개의 데이터 변경 작업(추가, 변경, 삭제)을
        하나의 작업으로 묶는 트랜잭션을 다루는 일도 함
      - DAO 클래스, Service 클래스에 해당
   2) View 컴포넌트
      - 모델이 처리한 데이터나 그 작업 결과를 가자고
        사용자에게 출력할 화면을 만드는 일을 함
      - 생성된 화면은 웹 브라우저가 출력하고
        뷰 컴포넌트는 HTML,CSS,JavaScript(jQuery)를 사용하고
        웹 브라우저가 출력할 UI를 만듦
      - HTML과 JSP를 사용하여 작성할수 있음.
      - Thymeleaf
   3) Controller 컴포넌트
      - 클라이언트의 요청을 받았을 때
        그 요청에 대해 실제 업무를 수행하는 모델 컴포넌트를 호출
        하는 일을 함
      - 클라이언트가 보낸 데이터가 있다면
        모델을 호출할 때 전달하기 쉽게 데이터를 적절히 
        가공하는 일을 함.
      - 모델이 업무 수행을 완료하면, 그 결과를 가지고 화면을
        생성하도록 뷰에게 전달
      - Servlet을 사용하여 작성할수 있음

9. 프런트 컨트롤러(Front Controller) 패턴
   1) 컨트롤러를 대표해서 모든 요청과 응답을 대응함
   2) 요청 및 응답에 대한 횡단 관심사(보안, 예외 처리)를 적용함
   3) 적절한 하위 컨트롤러에게 작업 위임, 뷰 선택 및 결과를 출력함

10. 스프링 MVC의 요청/응답 처리 호출
   1) 프런트 컨트롤러인 DispatcherServlet을 중심으로 동작함
   2) MVC(Model-View-Controller)가 협력해 웹 요청과 응답을 처리함.
